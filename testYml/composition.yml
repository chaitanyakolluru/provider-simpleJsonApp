apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: simplejsonapp-composition
  labels:
    crossplane.io/xrd: xjsonppp.simplejsonapp.crossplane.io
    provider: provider-simplejsonapp
spec:
  compositeTypeRef:
    apiVersion: simplejsonapp.crossplane.io/v1alpha1
    kind: XJsonApp
  resources:
    - name: record
      base:
        apiVersion: records.simplejsonapp.crossplane.io/v1alpha1
        kind: Record
        spec:
          forProvider:
          providerConfigRef:
            name: provider-simplejsonapp-config
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: metadata.namespace
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: spec.parameters
          toFieldPath: spec.forProvider
          policy:
            fromFieldPath: Required
        - type: ToCompositeFieldPath
          fromFieldPath: spec.forProvider
          toFieldPath: status.record
          policy:
            fromFieldPath: Required
    - name: configmap
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: ConfigMap
              data:
                name: dummy
          providerConfigRef:
            name: kubernetes-provider
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: status.record.name
          toFieldPath: spec.forProvider.manifest.data.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: status.record.designation
          toFieldPath: spec.forProvider.manifest.data.designation
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: status.record.location
          toFieldPath: spec.forProvider.manifest.data.location
          policy:
            fromFieldPath: Required
        - type: CombineFromComposite
          combine:
            variables:
              - fromFieldPath: status.record.age
            strategy: string
            string:
              fmt: "%d"
          toFieldPath: spec.forProvider.manifest.data.age
          policy:
            fromFieldPath: Required
        ## fails as todos is an array of varying elements
        # - type: FromCompositeFieldPath
        #   fromFieldPath: status.record.todos
        #   toFieldPath: spec.forProvider.manifest.data.todos
        #   policy:
        #     fromFieldPath: Required
    - name: deployment
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: apps/v1
              kind: Deployment
              spec:
                replicas: 1
                template:
                  spec:
                    containers:
                      - name: busybox
                        image: busybox
                        command:
                          - "sh"
                          - "-c"
                          - "sleep 3600"
                        volumeMounts:
                          - name: simplejsonapp
                            mountPath: /etc/config
                    volumes:
                      - name: simplejsonapp
                        configMap:
                          name: TOBEREPLACED
          providerConfigRef:
            name: kubernetes-provider
      patches:
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.metadata.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.spec.template.spec.volumes[0].configMap.name
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
          policy:
            fromFieldPath: Required
        - type: FromCompositeFieldPath
          fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
          policy:
            fromFieldPath: Required
