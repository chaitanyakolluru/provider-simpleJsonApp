// Code generated by MockGen. DO NOT EDIT.
// Source: ./record.go

// Package record is a generated GoMock package.
package record

import (
	context "context"
	reflect "reflect"

	v1alpha1 "git.heb.com/provider-simplejsonapp/apis/records/v1alpha1"
	gomock "github.com/golang/mock/gomock"
)

// MockSjaClientInterface is a mock of SjaClientInterface interface.
type MockSjaClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockSjaClientInterfaceMockRecorder
}

// MockSjaClientInterfaceMockRecorder is the mock recorder for MockSjaClientInterface.
type MockSjaClientInterfaceMockRecorder struct {
	mock *MockSjaClientInterface
}

// NewMockSjaClientInterface creates a new mock instance.
func NewMockSjaClientInterface(ctrl *gomock.Controller) *MockSjaClientInterface {
	mock := &MockSjaClientInterface{ctrl: ctrl}
	mock.recorder = &MockSjaClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSjaClientInterface) EXPECT() *MockSjaClientInterfaceMockRecorder {
	return m.recorder
}

// DeleteRecord mocks base method.
func (m *MockSjaClientInterface) DeleteRecord(ctx context.Context, record v1alpha1.RecordParameters) (v1alpha1.RecordObservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", ctx, record)
	ret0, _ := ret[0].(v1alpha1.RecordObservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockSjaClientInterfaceMockRecorder) DeleteRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockSjaClientInterface)(nil).DeleteRecord), ctx, record)
}

// GetRecord mocks base method.
func (m *MockSjaClientInterface) GetRecord(ctx context.Context, name string) (v1alpha1.RecordObservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", ctx, name)
	ret0, _ := ret[0].(v1alpha1.RecordObservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockSjaClientInterfaceMockRecorder) GetRecord(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockSjaClientInterface)(nil).GetRecord), ctx, name)
}

// PostRecord mocks base method.
func (m *MockSjaClientInterface) PostRecord(ctx context.Context, record v1alpha1.RecordParameters) (v1alpha1.RecordObservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostRecord", ctx, record)
	ret0, _ := ret[0].(v1alpha1.RecordObservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostRecord indicates an expected call of PostRecord.
func (mr *MockSjaClientInterfaceMockRecorder) PostRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostRecord", reflect.TypeOf((*MockSjaClientInterface)(nil).PostRecord), ctx, record)
}

// PutRecord mocks base method.
func (m *MockSjaClientInterface) PutRecord(ctx context.Context, record v1alpha1.RecordParameters) (v1alpha1.RecordObservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutRecord", ctx, record)
	ret0, _ := ret[0].(v1alpha1.RecordObservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutRecord indicates an expected call of PutRecord.
func (mr *MockSjaClientInterfaceMockRecorder) PutRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutRecord", reflect.TypeOf((*MockSjaClientInterface)(nil).PutRecord), ctx, record)
}
